"""
Django settings for logproj project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "true").lower() == "true"

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "accounts",
    "ads"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = 'logproj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                "django.template.context_processors.debug",
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'logproj.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_USER_MODEL = "accounts.User"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', "OPTIONS": {"min_length": 8},
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend" if not DEBUG else "django.core.mail.backends.console.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.example.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "true").lower() == "true"
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "no-reply@example.com")

ADMINS = [tuple(a.split(",")) if "," in a else ("Admin", a) for a in os.getenv("ADMINS", "").split() if a]

LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
"version": 1,
"disable_existing_loggers": False,

"filters": {
    "require_debug_true": {
        "()": "django.utils.log.RequireDebugTrue",
    },
    "require_debug_false": {
        "()": "django.utils.log.RequireDebugFalse",
    },
    "max_info": {
        "()": "accounts.logging_filters.MaxLevelFilter",
        "level": "INFO",
    },
    "only_warning": {
        "()": "accounts.logging_filters.ExactLevelFilter",
        "level": "WARNING",
    },
},

"formatters": {
    "console_basic": {
        "format": "%(asctime)s [%(levelname)s] %(message)s",
        "datefmt": "%Y-%m-%d %H:%M:%S",
    },
    "console_warning": {
        "format": "%(asctime)s [%(levelname)s] %(message)s — %(pathname)s",
        "datefmt": "%Y-%m-%d %H:%M:%S",
    },
    "console_error": {
        "format": "%(asctime)s [%(levelname)s] %(message)s — %(pathname)s %(exc_text)s",
"datefmt": "%Y-%m-%d %H:%M:%S",
},
"general": {
"format": "%(asctime)s [%(levelname)s] %(module)s: %(message)s",
"datefmt": "%Y-%m-%d %H:%M:%S",
},
"errors": {
"format": "%(asctime)s [%(levelname)s] %(message)s — %(pathname)s %(exc_text)s",
"datefmt": "%Y-%m-%d %H:%M:%S",
},
"security": {
"format": "%(asctime)s [%(levelname)s] %(module)s: %(message)s",
"datefmt": "%Y-%m-%d %H:%M:%S",
},
"mail_no_exc": {
"format": "%(asctime)s [%(levelname)s] %(message)s — %(pathname)s",
"datefmt": "%Y-%m-%d %H:%M:%S",
},
},

"handlers": {
    "console_debug": {
        "class": "logging.StreamHandler",
        "level": "DEBUG",
        "filters": ["require_debug_true", "max_info"],
        "formatter": "console_basic",
    },
    "console_warning": {
        "class": "logging.StreamHandler",
        "level": "WARNING",
        "filters": ["require_debug_true", "only_warning"],
        "formatter": "console_warning",
    },
    "console_error": {
        "class": "logging.StreamHandler",
        "level": "ERROR",
        "filters": ["require_debug_true"],
        "formatter": "console_error",
    },
    "general_file": {
        "class": "logging.FileHandler",
        "level": "INFO",
        "filters": ["require_debug_false"],
        "formatter": "general",
        "filename": os.fspath(LOG_DIR / "general.log"),
        "encoding": "utf-8",
    },
    "errors_file": {
        "class": "logging.FileHandler",
        "level": "ERROR",
        "formatter": "errors",
        "filename": os.fspath(LOG_DIR / "errors.log"),
        "encoding": "utf-8",
    },
    "security_file": {
        "class": "logging.FileHandler",
        "level": "DEBUG",
        "formatter": "security",
        "filename": os.fspath(LOG_DIR / "security.log"),
        "encoding": "utf-8",
    },
    "mail_admins": {
        "class": "django.utils.log.AdminEmailHandler",
        "level": "ERROR",
        "filters": ["require_debug_false"],
        "formatter": "mail_no_exc",
    },
},

"loggers": {
    "django": {
        "handlers": ["console_debug", "console_warning", "console_error", "general_file"],
        "level": "DEBUG",
        "propagate": False,
    },
    "django.request": {
        "handlers": ["errors_file", "mail_admins"],
        "level": "ERROR",
        "propagate": True,
    },
    "django.server": {
        "handlers": ["errors_file", "mail_admins"],
        "level": "ERROR",
        "propagate": True,
    },
    "django.template": {
        "handlers": ["errors_file"],
        "level": "ERROR",
        "propagate": True,
    },
    "django.db.backends": {
        "handlers": ["errors_file"],
        "level": "ERROR",
        "propagate": True,
    },
    "django.security": {
        "handlers": ["security_file"],
        "level": "INFO",
        "propagate": False,
    },
},
}